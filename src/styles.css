@tailwind base;
@tailwind components;
@tailwind utilities;

/* Sidebar */

/* Place global resets and CSS variables in Tailwind's base layer so
     they behave like foundational styles and can be overridden by utilities. */
@layer base {
    :root {
        --bg: #0f172a;
        --panel: #1e2537;
        --panel-alt: #2b3246;
        --border: #444c63;
        --text: #f8fafc;
        --text-dim: #94a3b8;
        --accent: #38bdf8;
        --danger: #f87171;
        --mono: ui-monospace, SFMono-Regular, Consolas, monospace;
        --do: #bfe5d8;
        --unreach: #f87171;
    }

    * {
        box-sizing: border-box;
    }

    body {
        margin: 0;
        background-color: var(--bg);
        color: var(--text);
        font-family: system-ui, -apple-system, BlinkMacSystemFont, Inter, Roboto, "Segoe UI", sans-serif;
        font-size: 16px;
        line-height: 1.4;
        overflow-y: auto;
        overflow-x: hidden;
    }

    #root {
        display: flex;
        align-items: flex-start;
        width: 100%;
    }
}

/* Put component and layout classes inside the components layer so they
     are available alongside Tailwind's own components and can be composed
     with utility classes. */
@layer components {
    /* Sidebar */
    #sidebar {
        position: sticky;
        top: 0;
        height: 100vh;

        width: 260px;
        min-width: 260px;
        max-width: 260px;

        background-color: #121826;
        border-right: 1px solid var(--border);

        display: flex;
        flex-direction: column;
        /* keep the left nav above any sticky/fixed headers */
        z-index: 10001;
    }

    #sidebarTop {
        padding: 12px 16px;
        border-bottom: 1px solid var(--border);
        flex-shrink: 0;
    }

    #sidebarTop h1 {
        margin: 0 0 4px;
        font-size: 13px;
        font-weight: 600;
        color: var(--accent);
    }

    #sidebarTop .note {
        color: var(--text-dim);
        font-size: 11px;
        line-height: 1.3;
    }

    #fileInputs {
        padding: 12px 16px;
        border-bottom: 1px solid var(--border);
        flex-shrink: 0;
    }

    #fileInputs label {
        display: block;
        font-size: 11px;
        font-weight: 500;
        color: var(--text);
        margin-bottom: 4px;
    }

    #fileInputs input[type="file"] {
        width: 100%;
        font-size: 11px;
        background: transparent;
        color: var(--text);
        border: 1px solid var(--border);
        padding: 4px;
    }

    #fileInputs select {
        width: 100%;
        font-size: 11px;
        background: #0f172a;
        color: var(--text);
        border: 1px solid var(--border);
        padding: 4px;
        margin-top: 6px;
    }

    #loadStatus {
        font-size: 11px;
        color: var(--text-dim);
        margin-top: 8px;
        white-space: pre-line;
    }

    #entityBrowserHeader {
        padding: 8px 16px;
        font-size: 10px;
        text-transform: uppercase;
        color: var(--text-dim);
        border-bottom: 1px solid var(--border);
        letter-spacing: .05em;
        display: flex;
        justify-content: space-between;
        flex-shrink: 0;
    }

    #entitySearch {
        border: 1px solid var(--border);
        background: #0f172a;
        color: var(--text);
        font-size: 12px;
        padding: 4px 6px;
        margin: 8px 16px;
        flex-shrink: 0;
    }

    #entityList {
        flex: 1;
        min-height: 0;
        overflow-y: auto;
    }

    .entitySectionLabel {
        padding: 6px 16px;
        font-size: 10px;
        color: var(--text-dim);
        background-color: rgba(148, 163, 184, .08);
        border-top: 1px solid var(--border);
        border-bottom: 1px solid var(--border);
        text-transform: uppercase;
        letter-spacing: .05em;
    }

    .entityRow {
        border-bottom: 1px solid rgba(68, 76, 99, .4);
        padding: 8px 16px;
        cursor: pointer;
    }

    .specialIconSmall {
        width: 18px;
        height: 18px;
        object-fit: contain;
        display: inline-block;
    }

    .specialIconHeader {
        height: 16px;
        width: 16px;
        object-fit: contain;
        vertical-align: middle;
        margin-left: 8px;
    }

    .entityRow:hover {
        background-color: rgba(56, 189, 248, .08);
    }

    .entityName {
        color: var(--text);
        font-size: 12px;
        font-weight: 500;
    }

    /* avatar displayed in the sidebar for entities that have a profile sprite */
    .entityAvatar {
        @apply w-10 h-10 rounded-md object-cover;
        border: 1px solid var(--border);
        background-color: rgba(0,0,0,0.12);
        flex: 0 0 auto;
    }

    /* small avatar shown in the entity column header */
    .entityHeaderAvatar {
        @apply w-7 h-7 rounded-sm object-cover mr-2;
        border: 1px solid var(--border);
        background-color: rgba(0,0,0,0.12);
    }

    .entityMeta {
        color: var(--text-dim);
        font-size: 11px;
    }

    /* Grouped styles for entity list rows (replace inline styles) */
    .entityRowInner {
        @apply flex items-center gap-2;
    }

    .entityLeftCol {
        @apply flex flex-col items-center w-12;
    }

    .entityRightCol {
        @apply flex items-center gap-2 flex-1 min-w-0;
    }

    .errorMessage {
        margin-top: 6px;
    }

    /* Header main wrapper inside entity column */
    .entityHeaderMain {
        display: flex;
        align-items: center;
        flex: 1;
        min-width: 0;
    }

    /* Workspace */
    #workspaceOuter {
        flex: 1;
        min-width: 0;
        overflow-x: auto;
        overflow-y: visible;
    }

    /* workspace header and view toggle removed (unused) */

    #columnsWrapper {
        display: flex;
        flex-wrap: nowrap;
        align-items: flex-start;
        margin: 0 10px;
        min-width: max-content;
    }

    /* Entity column */
    .entityColumn {
        width: 565px;
        flex-shrink: 0;
        margin-right: 16px;
        display: flex;
        flex-direction: column;
    }

    .entityColumnHeader {
        background-color: var(--panel-alt);
        border-bottom: 1px solid var(--border);
        padding: 5px 10px;
        user-select: text;
    }

    /* Make the column header stick to the top of the viewport when scrolling
         so the entity name / controls remain visible. Adjust `top` if you have
         a global header bar that should remain above it. */
    .entityColumnHeader {
        position: sticky;
        top: 0;
        z-index: 12;
        /* subtle separation when stuck */
        box-shadow: 0 2px 6px rgba(0,0,0,0.06);
    }

    /* When the header is toggled to fixed via JS, use this class as a fallback
         visual style. Positioning (left/width) is set inline from JS for accuracy. */
    .entityColumnHeader.fixed {
        /* Keep the header in the normal flow/stacking; don't force fixed positioning.
             This class is only used to apply a stronger visual treatment while the
             element is stuck vertically via `position: sticky`. */
        z-index: 9999;
        box-shadow: 0 6px 18px rgba(0,0,0,0.12);
    }

    .entityHeaderTopRow {
        display: flex;
        align-items: center; /* center avatar, name, type and close button vertically */
        justify-content: space-between;
        margin-bottom: 4px;
    }

    .entityHeaderName {
        color: var(--text);
        font-size: 16px;
        font-weight: 600;
        flex: 1;
        min-width: 0;
        /* stack title and subtitle */
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 4px;
        overflow: hidden;
    }

    /* row containing the title and the small special badge */
    .entityHeaderTitleRow {
        display: flex;
        align-items: center;
        gap: 8px;
        width: 100%;
        min-width: 0;
    }

    /* title text sits inline with the special badge */
    .entityHeaderTitleText {
        display: inline-block;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .entitySourceSubtitle {
        color: var(--text-dim);
        font-size: 12px;
        line-height: 1;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .entitySpecialBadge {
        display: inline-flex;
        align-items: center;
    }

    .entitySpecialName {
        color: var(--text-dim);
        font-size: 12px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .entityHeaderType {
        font-size: 12px;
        line-height: 1;
        color: var(--text-dim);
        margin-left: 8px;
        white-space: nowrap;
    }

    .closeBtn {
        color: var(--danger);
        font-size: 11px;
        font-weight: 500;
        padding-left: 8px;
        cursor: pointer;
        align-self: center;
    }

    /* subsystem block */


    .rawRuleList {
        display: flex;
        flex-direction: column;
        font-family: var(--mono);
        font-size: 12px;
        margin-top: 6px;
    }

    /* Visual grouping for segments */
    .segmentGroup {
        margin-bottom: 8px;
        padding: 4px 6px;
        background: #1e1f25;
    }

    .rawRuleRow {
        display: flex;
        flex-direction: column;
        padding: 0px 0px;
        background: rgba(15, 23, 42, 0.35);
        border: 1px solid rgba(68, 76, 99, 0.25);
    }

    .rawRuleMain {
        display: grid;
        grid-template-columns: 20px 1fr 12px 1fr;
        gap: 4px;
        align-items: center;
    }

    .rawRuleIdx {
        color: var(--text-dim);
        text-align: right;
        padding-right: 5px;
    }

    .rawRuleCondition {
        color: var(--text);
    }

    .rawRuleArrow {
        text-align: center;
        color: var(--text-dim);
    }

    .rawRuleAction {
        color: var(--do);
        font-weight: 600;
    }

    .rawRuleActionSkip {
        color: var(--text-dim);
        font-weight: 500;
    }

    /* When rendering inside a segment group, do not give each rule its own boxed background/border.
         Use a simpler row look and let the segment summary visually separate the block. */
    .segmentGroup .rawRuleRow.segmentRule {
        background: transparent;
        border: none;
        padding: 4px 6px;
    }

    .segmentSummaryBlock {
        border: 1px solid #666;
        margin-top: 8px;
        padding: 8px;
        display: flex;
        flex-direction: column;
        align-items: stretch;
    }

    .segmentSummaryText {
        display: flex;
        flex-direction: column;
    }

    /* Align IF/AND/DO labels and their content using a 2-column grid so everything lines up */
    .segmentSummaryLine {
        display: grid;
        grid-template-columns: 30px 1fr;
        gap: 8px;
        align-items: baseline;
        font-family: var(--mono);
        font-size: 14px;
        margin-left: 15px;
    }

    .segmentSummaryLabel {
        color: var(--text-dim);
        font-weight: 700;
        text-transform: uppercase;
        font-size: 12px;
        letter-spacing: .04em;
        text-align: left;
    }

    .segmentSummaryContent {
        color: var(--text);
        margin-left: 5px;
    }

    .segmentSummaryDo {
        color: var(--do);
        font-weight: 700;
        margin-left: 5px;
    }

    /* Segment-specific header and row styles removed (not used by raw view). */

    /* Detailed segment formula styles removed (unused) */

    .unreachableNote {
        color: var(--unreach);
        font-weight: 600;
    }

    /* Overrides: ensure the small special icon in the sidebar is right-aligned and
         the entity name truncates instead of being overlapped. Appending overrides
         here avoids touching the earlier definitions and will take precedence. */
    .entityRow .specialIconSmall {
        flex: 0 0 auto;
        margin-left: 8px;
    }

    .entityRow .entityRightCol {
        justify-content: space-between;
    }

    .entityRow .entityName {
        flex: 1 1 auto;
        min-width: 0;
        /* allow wrapping to next line when the name is long */
        white-space: normal;
        overflow-wrap: anywhere;
    }

    /* Version buttons shown under each grouped entity name */
    .entityVersions {
        display: flex;
        gap: 6px;
        align-items: center;
        margin-top: 6px;
        flex-wrap: wrap;
    }

    .versionBtn {
        display: inline-block;
        max-width: 120px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: 11px;
        color: var(--text-dim);
        background: transparent;
        border: 1px solid var(--border);
        padding: 4px 6px;
        border-radius: 6px;
        cursor: pointer;
    }

    .versionBtn:hover {
        background-color: rgba(56,189,248,0.06);
        color: var(--text);
        border-color: rgba(56,189,248,0.4);
    }

    /* Sources list in the sidebar */
    #sourcesList {
        margin-top: 10px;
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    .sourceRow {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 8px;
        padding: 6px 8px;
        background: transparent;
        border: 1px solid rgba(68,76,99,0.06);
        border-radius: 6px;
        font-size: 12px;
    }

    .sourceName {
        font-weight: 600;
        color: var(--text);
        max-width: 120px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .sourceCounts {
        color: var(--text-dim);
        font-size: 11px;
        margin-left: 6px;
        white-space: nowrap;
    }

    .sourceRemoveBtn {
        background: transparent;
        border: none;
        color: var(--danger);
        cursor: pointer;
        font-size: 12px;
        padding: 2px 6px;
    }
}
